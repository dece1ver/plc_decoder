name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: 

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        target: [x86_64-unknown-linux-gnu, x86_64-pc-windows-msvc, x86_64-apple-darwin]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build the project
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}-binary
          path: target/${{ matrix.target }}/release/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.target }}-binary
          path: binaries/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload release asset (Linux)
        uses: actions/upload-release-asset@v1
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: binaries/x86_64-unknown-linux-gnu/release/plc_decoder
          asset_name: plc_decoder-linux
          asset_content_type: application/octet-stream

      - name: Upload release asset (Windows)
        uses: actions/upload-release-asset@v1
        if: matrix.target == 'x86_64-pc-windows-msvc'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: binaries/x86_64-pc-windows-msvc/release/plc_decoder.exe
          asset_name: plc_decoder-windows.exe
          asset_content_type: application/octet-stream

      - name: Upload release asset (macOS)
        uses: actions/upload-release-asset@v1
        if: matrix.target == 'x86_64-apple-darwin'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: binaries/x86_64-apple-darwin/release/plc_decoder
          asset_name: plc_decoder-macos
          asset_content_type: application/octet-stream
